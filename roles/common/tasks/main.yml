
- name: build hosts file
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_eth1.ipv4.address }} {{item}}" state=present
  when: hostvars[item].ansible_eth1.ipv4.address is defined
  with_items: "{{ groups['all'] }}"

# work only when cache disk is /dev/vde, should be refactored for more configurable way
# this task creates udev rule which sets vde disk type to non rotational
- name: make cache disk look like non-magnetic
  lineinfile:
    create: true
    path: /etc/udev/rules.d/98-vde.rules
    line: 'ACTION=="add|change", SUBSYSTEM=="block", KERNEL=="vde", ATTR{queue/rotational}:="0"'
  when: cache

- name: Create /etc/pwx
  file: path=/etc/pwx state=directory

- name: Create /var/lib/kubelet/plugins/com.openstorage.pxd
  file: path=/var/lib/kubelet/plugins/com.openstorage.pxd state=directory

- name: Create /var/lib/kubelet/plugins/pxd.portworx.com
  file: path=/var/lib/kubelet/plugins/pxd.portworx.com state=directory

- name: Create /var/lib/portworx
  file: path=/var/lib/portworx state=directory

- name: Create /var/lib/osd/driver
  file: path=/var/lib/osd/driver state=directory

- name: Create /minio
  file: path=/minio state=directory

- name: copy cert key
  copy: src=insecure_ca.key owner=root group=root dest=/etc/ssl/insecure_ca.key
  when: auth

- name: copy ca
  copy: src=insecure_ca.crt owner=root group=root dest=/etc/pwx/insecure_ca.crt
  when: auth

- name: create server key
  command: openssl genrsa -out /etc/pwx/server.key 2048
  args:
    creates: /etc/pwx/server.key
  when: auth

- name: create server csr
  openssl_csr:
    path: /etc/pwx/server.csr
    privatekey_path: /etc/pwx/server.key
    common_name: "{{ inventory_hostname }}"
  when: auth

- name: create certs
  openssl_certificate:
    path: /etc/pwx/server.crt
    csr_path: /etc/pwx/server.csr
    ownca_path: /etc/pwx/insecure_ca.crt
    ownca_privatekey_path: /etc/ssl/insecure_ca.key
    provider: ownca
  when: auth

- name: update etcd config
  lineinfile: dest=/etc/etcd/etcd.conf regexp='^ETCD_LISTEN_CLIENT_URLS=' line='ETCD_LISTEN_CLIENT_URLS=http://{{ ansible_eth1.ipv4.address }}:2379,http://127.0.0.1:2379' state=present

- name: enable services
  service: name={{ item }} state=started enabled=yes
  with_items:
    - docker
    - ntpd
    - etcd

- name: copy docker image to host
  copy: src=px.img owner=root group=root dest=/root force=yes
  when: not pullimage

- name: install image
  shell: docker load < /root/px.img
  when: not pullimage

- name: Pulling pximage
  command: docker pull {{ pximage }}
  when: pullimage

- name: check if px-runc is installed
  stat:
    path: /opt/pwx/bin/px-runc
  register: px_runc_rules

- name: Installing OCI image
  command: docker run --entrypoint /runc-entry-point.sh --rm -i --privileged=true -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx {{ pximage }} --upgrade

- name: Install px from oci image
  command: /opt/pwx/bin/px-runc  install -c "pxup-cluster" -k etcd:http://{{ hostvars[groups['all'][0]].ansible_eth1.ipv4.address }}:2379 -A {{ oci_switches }}
  when: not auth and not px_runc_rules.stat.exists
  environment:
    CSI_ENDPOINT: "unix:///var/lib/kubelet/plugins/pxd.portworx.com/csi.sock"

# cache drive name depends on number of disks in case when you have 3 discs and enable cache script creates one more disk with name vde which basically is used here
- name: Install px from oci image with cache
  command: /opt/pwx/bin/px-runc  install -c "pxup-cluster" -k etcd:http://{{ hostvars[groups['all'][0]].ansible_eth1.ipv4.address }}:2379 -cache /dev/vde -s /dev/vdb -s /dev/vdc -s /dev/vdd {{ oci_switches }}
  when: oci and not auth and not px_runc_rules.stat.exists and cache
  environment:
    CSI_ENDPOINT: "unix:///var/lib/kubelet/plugins/pxd.portworx.com/csi.sock"

- name: Install px from oci image
  command: /opt/pwx/bin/px-runc  install -c "pxup-cluster" -k etcd:http://{{ hostvars[groups['all'][0]].ansible_eth1.ipv4.address }}:2379 -jwt_issuer=openstorage.io -A -apirootca=/etc/pwx/insecure_ca.crt -apicert=/etc/pwx/server.crt -apikey=/etc/pwx/server.key  -apidisclientauth {{ oci_switches }}
  when: auth and not px_runc_rules.stat.exists and not cache
  environment:
    PORTWORX_AUTH_JWT_SHAREDSECRET: "{{ shared_secret }}"
    PORTWORX_AUTH_SYSTEM_KEY: "{{ shared_secret }}"
    CSI_ENDPOINT: "unix:///var/lib/kubelet/plugins/com.openstorage.pxd/csi.sock"

- name: Systemctl start portworx
  service: name=portworx state=restarted enabled=yes

- name: determine if minio is running already
  command: docker inspect minio
  register: minio_inspect_result
  ignore_errors: True

- name: stop minio
  command: docker stop minio
  when: minio_inspect_result is succeeded

- name: rm minio
  command: docker rm minio
  when: minio_inspect_result is succeeded

- name: Run minio server
  command: docker run --name minio -d -p 7999:9000 -e MINIO_ACCESS_KEY=admin -e MINIO_SECRET_KEY=password -v /minio:/minio minio/minio server /minio

- name: Waiting for system to be online
  wait_for: timeout=600 port=9001

- name: setup trial license
  command: /opt/pwx/bin/pxctl license act trial
  register: result
  retries: 5
  delay: 30
  until: result is not failed

- name: login to secret kvdb
  command: /opt/pwx/bin/pxctl secrets kvdb login
  register: result
  retries: 5
  delay: 10
  until: result is not failed

- name: make pxctl available for execution
  file:
    path: /opt/pwx/bin
    mode: '0755'
    recurse: yes
